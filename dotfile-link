#!/usr/bin/python3
from glob import glob
from os import chdir, environ, makedirs, symlink, walk
from os.path import dirname, exists, expanduser, islink, join, realpath
from sys import stderr


REPO = environ.get('DOTFILES_REPO', expanduser('~/.dotfiles'))
HOME = environ['HOME']
IGNORED = []
chdir(REPO)

def eprint(msg):
    print(msg, file=sys.stderr)


def expand_ignored():
    ignore_globs = ['dotfile-link', '.*']
    try:
        fh = open(join(REPO, '.dfignore'))
        for expr in fh.readlines():
            expr = expr.strip()
            if expr and not expr.startswith('#'):
                ignore_globs.append(expr)
        fh.close()
    except IOError:
        pass
    for expr in ignore_globs:
        IGNORED.extend(glob(expr))


def managed():
    for dirpath, _, filenames in walk(REPO):
        local_dir = dirpath[len(REPO):].lstrip('/')
        for fn in filenames:
            full_path = join(local_dir, fn)
            if any(full_path.startswith(i) for i in IGNORED):
                continue

            target = ("~/.%s" % full_path)
            yield join(REPO, full_path), expanduser(target)


expand_ignored()

print(f"Updating {HOME} dotfiles from {REPO}")
noop = new = error = newdir = 0
for source, target in managed():
    if islink(target):
        dest = realpath(target)
        if dest != source:
            eprint(f"* skipping: {target} is a symlink to {dest}")
            error += 1
        else:
            noop += 1
        continue
    elif exists(target):
        eprint (f"* skipping: {target} already exists")
        error += 1
        continue
    else:
        directory = dirname(target)
        if not exists(directory):
            makedirs(directory)
            newdir += 1
        print(f"- linking {target} -> {source}")
        symlink(source, target)
        new += 1

print(f"{noop} unchanged, {new} new links, "
      f"{newdir} directories created, {error} errors.")

